      SUBROUTINE INIT1

!     Legacy Mars GCM v24
!     Mars Climate Modeling Center
!     NASA Ames Research Center

C
C  PURPOSE:
C      INIT1 INITIALIZES THE ATMOSPHERIC VARIABLES FOR EACH GRID POINT
C      TO A SOMEWHAT ARTIFICIAL (ISOTHERMAL WITH NO WINDS) CONDITION.
C      INIT1 IS CALLED WHEN DOING A COLD START OF THE MODEL, (WHEN
C      STARTING AT DAY ZERO AND HOUR ZERO AS OPPOSED TO WHEN STARTING
C      FROM A TIME STEP GENERATED BY A PREVIOUS RUN).
C  MODIFIED FROM ORIGINAL BY
C      STEVE POHORSKY    INFORMATICS     TASK 605    JUL 82
C  FOR
C      JIM POLLACK
C  ENVIRONMENT
C      Cray-2            UNICOS 3.0      FORTRAN
C  REVISION HISTORY
C     JAN 87        J. SCHAEFFER           TASK 904
C     INCORPORATED VARIABLE DUST  ( SEE NOTE OF 1/19/87 ).
C  INPUT PARAMETERS
C      IM          - LONGITUDINAL DIMENSION OF GRID.
C      JM          - LATITUDINAL DIMENSION OF GRID.
C      NLAY        - VERTICAL DIMENSION OF GRID (THE NUMBER OF ATMOSPHER
C                    LAYERS).
C      TOPOG(J,I)  - GEOPOTENTIAL (GRAV TIMES HEIGHT) TIMES NEGATIVE 1,
C       ARRAY        AT THE SURFACE FOR EACH GRID POINT. THIS VALUE IS
C                    BASED ON THE TOPOGRAPHY OF THE MARTIAN SURFACE. THE
C                    HEIGHT IS MEASURED FROM A REFERENCE ELEVATION.
C  OUTPUT PARAMETERS
C      INIT1 INITIALIZES THE ARRAYS   P, U, V, T, GT, TINF, FA, AND
C      SDGR.
C  CALLED BY
C      INPUT
C

      use grid_h
      use defines_h
      use constants_h, only: PI, RGAS, KAPA
      use standard_h
      use cldcommon_h

      implicit none

C######################################################################

      real*8  :: ZM(L_JSIZE), latitude, longitude

!     implicit none

      integer :: i, j, k, l
      real*8  :: wtm, ratio, presm
      real*8  :: tot, xlj

!  Cold Start (local) variable

      real*8  :: Tcs

C#=====================================================================

      IGROW=0
      FULLCOMP3 = .FALSE.

C     THIS SUBROUTINE IS FOR COLD-START INITIAL CONDITIONS.
C     Set variables to zero.

      do J=1,L_J-1
        do I=1,L_I
          fa(j,i)       = 0.0D0
          sdgr(j,i)     = 0.0D0
          hthst(j,i)    = 0.0D0
          HSOLST(j,i)   = 0.0D0
          HRAD(j,i)     = 0.0D0
          HCOND(j,i)    = 0.0D0
          DELTAT(j,i,0) = 0.0D0
          CO2ICE(j,i)   = 0.0D0
          SUBFLUX(j,i)  = 0.0D0
          do L=1,L_LAYERS
            DELTAT(j,i,L) = 0.0D0
            DELTAU(j,i,L) = 0.0D0
            DELTAV(j,i,L) = 0.0D0
          end do
        end do
      end do

C     Set U and V velocities to zero, and set T to 170.0.

      Tcs = 170.0D0

      DO 106 L=1,L_LAYERS
        DO 104 J=1,L_JSIZE-1
          DO 102 I=1,L_ISIZE
            U(J,I,L) = 0.0
            V(J,I,L) = 0.0
            T(J,I,L) = Tcs
  102     CONTINUE
  104   CONTINUE
  106 CONTINUE

      DO 110 J=1,L_JSIZE-1
        DO 108 I=1,L_ISIZE
          P(J,I)      = PSF*EXP(TOPOG(J,I)/(RGAS*T(J,I,NLAY)))-PTROP
          SSUN(J,I)   = 0.0
          TSTRAT(J,I) = Tcs
          GT(J,I)     = Tcs
          TINF(J,I)   = Tcs
  108   CONTINUE
  110 CONTINUE

C     NOW ADJUST P(J,I) ALA GMP TO INSURE AVERAGE PRESSURE EQAULS PSF

      FIM = IM

      DO 136 J=1,JM-1
        ZM(J)=0.0

        DO 135 I=1,IM
          ZM(J)=ZM(J)+P(J,I)
  135   CONTINUE

        ZM(J)=ZM(J)/FIM
  136 CONTINUE

      WTM = 0.0
      ZMM = 0.0

      DO 137 J=1,JM-1
        WTM = WTM+ABS(DXYP(J))
        ZMM = ZMM+ZM(J)*ABS(DXYP(J))
  137 CONTINUE

      ZMM   = ZMM/WTM
      ZMM   = ZMM+PTROP
      RATIO = PSF/ZMM

      WRITE(MTP,300) RATIO
  300 FORMAT (1X, 'RATIO FOR MASS BALANCE INIT1=', E10.4)

      DO 410 J=1,JM-1
        DO 400 I=1,IM
          P(J,I) = RATIO*(P(J,I)+PTROP)-PTROP

          IF(P(J,I).LE.0.) THEN
            WRITE(MTP,354) I,J,P(J,I)
  354       FORMAT(1X,' TROUBLE.INIT1.  P.LE.0.',5X,'I=',I3,3X,
     *                'J=',I3,3X, 'P=', E12.5)
            STOP
          ENDIF

  400   CONTINUE
  410 CONTINUE

C Initialise CGRID variables
      write(6,'("COMP3 CALLED T IS TEMPERATURE, NOT THETA!!!!!")')

      JY1 = 1
      JY2 = 2

      DO I = 1,L_ISIZE
        DO J = 1,L_JSIZE-1
          PIB(I,J,1) = P(J,I)
          PIB(I,J,2) = P(J,I)
          DO L =1,L_LAYERS
            UOB(I,J,L,1) = 0.0
            UOB(I,J,L,2) = 0.0
C Yes! This is THETA not T
            PRESM = (SIGMA(2*L+2)*P(J,I))+PTROP
            T(J,I,L) = Tcs
            VOB(I,J,L,1) = 0.0
            VOB(I,J,L,2) = 0.0
            POB(I,J,L,1) = Tcs*((PSF/PRESM)**KAPA)
            POB(I,J,L,2) = Tcs*((PSF/PRESM)**KAPA)
            DO K = 1,NTRACE

!  Dry Mars initial conditions - added 06-15-09

              QTRACE(J,I,L,K) = 0.0

              QOB(I,J,L,K,1)  = QTRACE(J,I,L,K)
              QOB(I,J,L,K,2)  = QTRACE(J,I,L,K)
            END DO
          END DO
          latitude  =  -90.+180./L_J*J
          longitude = -180.+360./L_I*(I-1)

!         North polar cap surface water ice, in kg. 
!  Dry Mars initial conditions - added 06-15-09

!         npcwikg = 0.0D0  !set in modules.f90

          DO K = 1,NTRACE
            QCOND(J,I,K)     = 0.0
            QCONDSAVE(J,I,K) = 0.0
            SRFUPFLX(J,I,K)  = 0.0
            SRFDNFLX(J,I,K)  = 0.0

            if(microphysics .eqv. .true.) then
c This is where we set the North Residual cap of water (Lat>80N) 
              IF(NPCFLAG(J,I) .and. K.eq.NTRACE) THEN
                QCOND(J,I,K) = NPCWIKG
!                write(6,666) latitude,longitude
!666             FORMAT("Water ice at lat ",f6.2," and lon ",f7.2)
              ENDIF
            end if

            QOC(I,J,k,1)= QCOND(J,I,k)
            QOC(I,J,k,2)= QCOND(J,I,k)

          ENDDO
        END DO
      END DO

      DO 8090 I=1,L_ISIZE*L_JSIZE

      IF(MOD(I,L_ISIZE).NE.0) THEN
       IYE(I) = I + 1
      ELSE
       IYE(I) = I + 1 - L_ISIZE
      ENDIF

      IF(MOD(I,L_ISIZE).NE.1) THEN
       IYW(I) = I - 1
      ELSE
       IYW(I) = I - 1 + L_ISIZE
      ENDIF

8090  CONTINUE

      RETURN
      END
